<?xml version="1.0" encoding="utf-8" ?>

<chapter id="organizing-tests">
  <title>Organizing Tests</title>

  <para>
    <indexterm><primary>Test Suite</primary></indexterm>

    One of the goals of PHPUnit (see <xref linkend="goals" />) is that tests
    should be composable: we want to be able to run any number or combination
    of tests together, for instance all tests for the whole project, or the
    tests for all classes of a component that is part of the project, or just
    the tests for a single class.
  </para>

  <para>
    PHPUnit supports different ways of organizing tests and composing them into
    a test suite. This chapter shows the most commonly used approaches.
  </para>

  <section id="organizing-tests.filesystem">
    <title>Composing a Test Suite Using the Filesystem</title>

    <para>
      Probably the easiest way to compose a test suite is to keep all test case
      source files in a test directory. PHPUnit can automatically discover and
      run the tests by recursively traversing the test directory.
    </para>

    <para>
      Lets take a look at the test suite of the <ulink url="http://github.com/sebastianbergmann/php-object-freezer/">Object_Freezer</ulink>
      library. Looking at this project's directory structure, we see that the
      test case classes in the <filename>Tests</filename> directory mirror the
      package and class structure of the System Under Test (SUT) in the
      <filename>Object</filename> directory:
    </para>

    <screen>Object                              Tests
|-- Freezer                         |-- Freezer
|   |-- HashGenerator               |   |-- HashGenerator
|   |   `-- NonRecursiveSHA1.php    |   |   `-- NonRecursiveSHA1Test.php
|   |-- HashGenerator.php           |   |
|   |-- IdGenerator                 |   |-- IdGenerator
|   |   `-- UUID.php                |   |   `-- UUIDTest.php
|   |-- IdGenerator.php             |   |
|   |-- LazyProxy.php               |   |
|   |-- Storage                     |   |-- Storage
|   |   `-- CouchDB.php             |   |   `-- CouchDB
|   |                               |   |       |-- WithLazyLoadTest.php
|   |                               |   |       `-- WithoutLazyLoadTest.php
|   |-- Storage.php                 |   |-- StorageTest.php
|   `-- Util.php                    |   `-- UtilTest.php
`-- Freezer.php                     `-- FreezerTest.php</screen>

    <para>
      To run all tests for the library we just need to point the PHPUnit
      command-line test runner to the test directory:
    </para>

    <screen><userinput>phpunit Tests</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

............................................................ 60 / 75
...............

Time: 0 seconds

OK (75 tests, 164 assertions)</screen>

    <note>
      <para>
        If you point the PHPUnit command-line test runner to a directory it will
        look for <filename>*Test.php</filename> files.
      </para>
    </note>

    <para>
      To run only the tests that are declared in the <literal>Object_FreezerTest</literal>
      test case class in <filename>Tests/FreezerTest.php</filename> we can use
      the following command:
    </para>

    <screen><userinput>phpunit Tests/FreezerTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

............................

Time: 0 seconds

OK (28 tests, 60 assertions)</screen>

    <para>
      For more fine-grained control of which tests to run we can use the
      <literal>--filter</literal> switch:
    </para>

    <screen><userinput>phpunit --filter testFreezingAnObjectWorks Tests</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

.

Time: 0 seconds

OK (1 test, 2 assertions)</screen>

    <note>
      <para>
        A drawback of this approach is that we have no control over the order in
        which the test are run. This can lead to problems with regard to test
        dependencies, see <xref linkend="writing-tests-for-phpunit.test-dependencies"/>.
        In the next section you will see how you can make the test execution
        order explicit by using the XML configuration file.
      </para>
    </note>
  </section>

  <section id="organizing-tests.xml-configuration">
    <title>Composing a Test Suite Using XML Configuration</title>
    <indexterm><primary>XML Configuration</primary></indexterm>

    <para>
      PHPUnit's XML configuration file (<xref linkend="appendixes.configuration"/>)
      can also be used to compose a test suite.
      <xref linkend="organizing-tests.xml-configuration.examples.phpunit.xml"/>
      shows a minimal example that will add all <literal>*Test</literal> classes
      that are found in <filename>*Test.php</filename> files when the
      <filename>Tests</filename> is recursively traversed.
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml">
      <title>Composing a Test Suite Using XML Configuration</title>
      <programlisting><![CDATA[<phpunit>
  <testsuites>
    <testsuite name="Object_Freezer">
      <directory>Tests</directory>
    </testsuite>
  </testsuites>
</phpunit>]]></programlisting>
    </example>

    <para>
      The order in which tests are executed can be made explicit:
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml2">
      <title>Composing a Test Suite Using XML Configuration</title>
      <programlisting><![CDATA[<phpunit>
  <testsuites>
    <testsuite name="Object_Freezer">
      <file>Tests/Freezer/HashGenerator/NonRecursiveSHA1Test.php</file>
      <file>Tests/Freezer/IdGenerator/UUIDTest.php</file>
      <file>Tests/Freezer/UtilTest.php</file>
      <file>Tests/FreezerTest.php</file>
      <file>Tests/Freezer/StorageTest.php</file>
      <file>Tests/Freezer/Storage/CouchDB/WithLazyLoadTest.php</file>
      <file>Tests/Freezer/Storage/CouchDB/WithoutLazyLoadTest.php</file>
    </testsuite>
  </testsuites>
</phpunit>]]></programlisting>
    </example>
  </section>
</chapter>
